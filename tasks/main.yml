---
- name: Install pip
  package:
    name: python-pip
    state: present

- name: Add tarsnap apt key
  apt_key:
    url: https://pkg.tarsnap.com/tarsnap-deb-packaging-key.asc
    state: present
    id: "{{ backup__tarsnap_apt_key }}"

- name: Add tarsnap apt repo
  apt_repository:
    repo: "deb http://pkg.tarsnap.com/deb/{{ ansible_distribution_release }} ./"
    filename: tarsnap.list
    state: present

- name: Install tarsnap
  package:
    name: tarsnap
    state: present

- name: Copy tarsnap configuration file
  template:
    src: templates/tarsnap.conf.j2
    dest: /etc/tarsnap.conf
    mode: 0644
    owner: root
    group: root

- name: Install pexpect module globally
  # required by the expect module
  pip:
    name: pexpect
    state: present

- name: Check for supplied tarsnap key
  become: no
  local_action:
    module: stat
    path: "files/tarsnap/{{ ansible_fqdn }}.key"
  register: local_key
  ignore_errors: true

- name: Check local_key
  debug:
    msg: "Check: {{ local_key.stat.exists }}"

- name: Generate tarsnap key and register host
  expect:
    command: tarsnap-keygen --keyfile {{ backup__tarsnap_keyfile }} --user {{ backup__tarsnap_username }} --machine {{ ansible_fqdn }}
    responses:
      password: "{{ backup__tarsnap_password }}"
    creates: "{{ backup__tarsnap_keyfile }}"
  notify:
    - collect tarsnap key
    - print tarsnap key
    - restore tarsnap cache
  register: tarsnap_keygen
  # the tarsnap key file in the test environment isn't a valid one
  when: not local_key.stat.exists and backup__env != 'test'

- name: Copy supplied tarsnap key
  copy:
    src: "files/tarsnap/{{ ansible_fqdn }}.key"
    dest: "{{ backup__tarsnap_keyfile }}"
  when: local_key.stat.exists

- name: Set permissions on tarsnap key
  file:
    path: "{{ backup__tarsnap_keyfile }}"
    mode: 0600
    owner: root
    group: root

- name: Rebuild tarsnap cache
  become: true
  command: 'tarsnap --fsck'
  when: backup__env != 'test' # the tarsnap key file in the test environment
  # isn't a valid one
  changed_when: false

- name: Install acts
  copy:
    src: "files/acts"
    dest: "/usr/local/bin/acts"
    mode: 0744
    owner: root
    group: root

- name: Copy acts config file
  template:
    src: templates/acts.conf.j2
    dest: "{{ backup__acts_config_file }}"
    mode: 0600
    owner: root
    group: root

- name: Get path to acts command
  command: 'which acts'
  register: acts_full_path
  changed_when: false

- name: Install cron
  package:
    name: cron
    state: present

- name: Add backup task to cron
  cron:
    name: Backup to tarsnap
    job: "{{ acts_full_path.stdout }} -c {{ backup__acts_config_file }} make >> /var/log/acts.log 2>&1"
    minute: "{{ backup__cron_minute }}"
    hour: "{{ backup__cron_hour }}"
    dom: "{{ backup__cron_dom }}"
    month: "{{ backup__cron_month }}"
    dow: "{{ backup__cron_dow }}"
